{"version":3,"sources":["../remember-game/src/components/FriendCard/index.js","../remember-game/src/components/Title/index.js","../remember-game/src/components/Wrapper/index.js","../remember-game/src/App.js","../remember-game/src/index.js"],"names":["FriendCard","props","react_default","a","createElement","lib","animationIn","isVisible","onClick","guess","id","className","alt","name","src","image","Title","react","children","Wrapper","App","state","friends","sort","Math","random","guessed","score","character","_this","indexOf","setState","concat","alert","sweetVictory","prevProps","prevState","console","log","this","_this2","components_Wrapper","components_Title","map","friend","components_FriendCard","removeFriend","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"0zDAgBeA,MAZf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUC,YAAY,YAAYC,WAAW,GAC3CL,EAAAC,EAAAC,cAAA,OAAKI,QAAS,kBAAMP,EAAMQ,MAAMR,EAAMS,KAAKC,UAAU,QACnDT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,iBACbT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMY,KAAMC,IAAKb,EAAMc,kBCQ5BC,MAdf,SAAef,GACb,OACEC,EAAAC,EAAAC,cAACa,EAAA,SAAD,KACEf,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SACbT,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SAASV,EAAMiB,UAC9BhB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WAAf,uBACsBT,EAAAC,EAAAC,cAAA,yBADtB,kGCDOe,MAJf,SAAiBlB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,WAAWV,EAAMiB,kBCgE1BE,6MA7DbC,MAAQ,CACNC,QAASA,EAAQC,KAAK,kBAAMC,KAAKC,SAAW,KAC5CC,QAAS,GACTC,MAAO,KAGTlB,MAAQ,SAAAmB,GACN,IAAIF,EAAUG,EAAKR,MAAMK,SACW,IAAhCA,EAAQI,QAAQF,GAClBC,EAAKE,SACH,CACEL,QAASA,EAAQM,OAAOJ,GACxBD,MAAOE,EAAKR,MAAMM,MAAQ,EAC1BL,QAASA,EAAQC,KAAK,kBAAMC,KAAKC,SAAW,MAE9C,eAGFQ,MAAK,uBACLJ,EAAKE,SAAS,CACZJ,MAAO,EACPD,QAAS,GACTJ,QAASA,EAAQC,KAAK,kBAAMC,KAAKC,SAAW,WAYlDS,aAAe,WACbD,MAAK,mBACLJ,EAAKE,SAAS,CACZJ,MAAO,EACPD,QAAS,GACTJ,QAASA,EAAQC,KAAK,kBAAMC,KAAKC,SAAW,0FAZ7BU,EAAWC,GAC5BC,QAAQC,IAAI,oBACa,KAArBC,KAAKlB,MAAMM,OACbY,KAAKL,gDAYA,IAAAM,EAAAD,KACP,OACErC,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,sCAAsCH,KAAKlB,MAAMM,OAChDY,KAAKlB,MAAMC,QAAQqB,IAAI,SAAAC,GAAM,OAC5B1C,EAAAC,EAAAC,cAACyC,EAAD,CACEX,aAAcM,EAAKN,aACnBzB,MAAO+B,EAAK/B,MACZqC,aAAcN,EAAKM,aACnBpC,GAAIkC,EAAOlC,GACXqC,IAAKH,EAAOlC,GACZK,MAAO6B,EAAO7B,kBAvDRiC,mBCAlBC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.47300ef9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\nimport { Animated } from \"react-animated-css\";\n\nfunction FriendCard(props) {\n  return (\n    <Animated animationIn=\"headShake\" isVisible={true}>\n      <div onClick={() => props.guess(props.id)} className=\"card\">\n        <div className=\"img-container\">\n          <img alt={props.name} src={props.image} />\n        </div>\n      </div>\n    </Animated>\n  );\n}\n\nexport default FriendCard;\n","import React, { Fragment } from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return (\n    <Fragment>\n      <div className=\"upTop\">\n        <div className=\"title\">{props.children}</div>\n        <div className=\"subText\">\n          Welcome to the most <strong>radical</strong> memory game ever! If you\n          can manage to only click each character once, then you win.\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport friends from \"./friends.json\";\nclass App extends Component {\n  //Sets initial state of the application\n  state = {\n    friends: friends.sort(() => Math.random() - 0.5),\n    guessed: [],\n    score: 0\n  };\n  //pushes character to guessed array when selected\n  guess = character => {\n    let guessed = this.state.guessed;\n    if (guessed.indexOf(character) === -1) {\n      this.setState(\n        {\n          guessed: guessed.concat(character),\n          score: this.state.score + 1,\n          friends: friends.sort(() => Math.random() - 0.5)\n        },\n        () => {}\n      );\n    } else {\n      alert(`Buzz Kill! You Lose`);\n      this.setState({\n        score: 0,\n        guessed: [],\n        friends: friends.sort(() => Math.random() - 0.5)\n      });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"Update complete!\");\n    if (this.state.score === 10) {\n      this.sweetVictory();\n    }\n  }\n\n  sweetVictory = () => {\n    alert(`Tight, You Win!`);\n    this.setState({\n      score: 0,\n      guessed: [],\n      friends: friends.sort(() => Math.random() - 0.5)\n    });\n  };\n  render() {\n    return (\n      <Wrapper>\n        <Title>X-Treme Memory Game || Score: {this.state.score}</Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            sweetVictory={this.sweetVictory}\n            guess={this.guess}\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}